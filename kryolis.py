#size: 25x25

charOffset = 97
table = [[0,0,0,1.118033988749895,0,1.0,0,0,1.4142135623730951,1.5,0,1.4142135623730951,0,0,0,0,1.0,1.224744871391589,1.4352700094407325,1.4352700094407325,0,0,0,0,0],[0,0,0,1.118033988749895,0.5,0,0,1.4142135623730951,0,0,1.118033988749895,1.0,0,1.1981652640600127,0,1.0530432089900206,0,0.7071067811865476,0,0,0,0.7348469228349535,0.6557438524302001,0.9110433579144298,0],[0,0,0,0.5,0,1.0,0.7071067811865476,0,1.4142135623730951,0,0,1.4142135623730951,1.7320508075688772,0,0,0,0,0,0.5099019513592785,0,0,0,0.6557438524302001,0.9110433579144298,0],[1.118033988749895,1.118033988749895,0.5,0,0,0,0.5,0,1.118033988749895,1.0,0,0,0,0,0,1.1657186624567697,0,0.8660254037844386,0,1.1445523142259597,0,0,0,0,0.5385164807134505],[0,0.5,0,0,0,1.118033988749895,0,0,0,1.4142135623730951,1.0,0,0,0.8280096617793781,0.5099019513592785,0,0,0,1.1445523142259597,0,0,0.5385164807134505,0.6164414002968976,0,0],[1.0,0,1.0,0,1.118033988749895,0,0,0,1.0,1.118033988749895,1.5,0,0,0,1.268857754044952,1.0530432089900206,0,0,0,0,0,0.7348469228349535,0.9110433579144298,0,0.7348469228349535],[0,0,0.7071067811865476,0.5,0,0,0,0,0,0,0,0,0,0,1.004987562112089,0,1.224744871391589,0.7071067811865476,0.5099019513592785,0,0,0,0,0,0.58309518948453],[0,1.4142135623730951,0,0,0,0,0,0,1.0,0,0,1.0,1.4142135623730951,0,1.1874342087037917,0,0,0,0.5099019513592785,0,0,0,0.9110433579144299,1.1090536506409416,1.0677078252031311],[1.4142135623730951,0,1.4142135623730951,1.118033988749895,0,1.0,0,1.0,0,0,0,1.4142135623730951,1.0,0,0,0,1.7320508075688772,0,0,1.1224972160321824,0,0,0,0,0],[1.5,0,0,1.0,1.4142135623730951,1.118033988749895,0,0,0,0,0,0,0,0,0,0,1.5,0,0.714142842854285,0.714142842854285,0.7071067811865476,0,0,0.8831760866327847,0],[0,1.118033988749895,0,0,1.0,1.5,0,0,0,0,0,0.5,0,0.604648658313239,0.5099019513592785,0.8360023923410745,1.118033988749895,0,0,0,0,0,0,0,0.9433981132056605],[1.4142135623730951,1.0,1.4142135623730951,0,0,0,0,1.0,1.4142135623730951,0,0.5,0,0,1.0562196741208714,0,0,1.0,0,0,0,0,0,0.9110433579144299,0,0],[0,0,1.7320508075688772,0,0,0,0,1.4142135623730951,1.0,0,0,0,0,0.33999999999999997,0,0,0,0,0,1.1224972160321824,0,1.0677078252031311,0,0,1.0677078252031311],[0,1.1981652640600127,0,0,0.8280096617793781,0,0,0,0,0,0.604648658313239,1.0562196741208714,0.33999999999999997,0,0.6209669878504009,0,0,0,1.354843164355196,0,0,0,0.9325234581499813,0,0],[0,0,0,0,0.5099019513592785,1.268857754044952,1.004987562112089,1.1874342087037917,0,0,0.5099019513592785,0,0,0.6209669878504009,0,0.6236184731067546,0,0.6403124237432849,0,0,0.5099019513592785,0,0,0,0],[0,1.0530432089900206,0,1.1657186624567697,0,1.0530432089900206,0,0,0,0,0.8360023923410745,0,0,0,0.6236184731067546,0,0,0,0,0,0.7272551134230683,0.7189575787207476,0,0.5838664230798,0],[1.0,0,0,0,0,0,1.224744871391589,0,1.7320508075688772,1.5,1.118033988749895,1.0,0,0,0,0,0,0,0,0,0,0,0,0,0.7348469228349535],[1.224744871391589,0.7071067811865476,0,0.8660254037844386,0,0,0.7071067811865476,0,0,0,0,0,0,0,0.6403124237432849,0,0,0,0,0.4,0.5,0,0,0,0],[1.4352700094407325,0,0.5099019513592785,0,1.1445523142259597,0,0.5099019513592785,0.5099019513592785,0,0.714142842854285,0,0,0,1.354843164355196,0,0,0,0,0,0.5656854249492381,0,0,0,0,0],[1.4352700094407325,0,0,1.1445523142259597,0,0,0,0,1.1224972160321824,0.714142842854285,0,0,1.1224972160321824,0,0,0,0,0.4,0.5656854249492381,0,0.6403124237432849,0,0,0,0],[0,0,0,0,0,0,0,0,0,0.7071067811865476,0,0,0,0,0.5099019513592785,0.7272551134230683,0,0.5,0,0.6403124237432849,0,0,0.282842712474619,0.28284271247461906,0],[0,0.7348469228349535,0,0,0.5385164807134505,0.7348469228349535,0,0,0,0,0,0,1.0677078252031311,0,0,0.7189575787207476,0,0,0,0,0,0,0,0.22360679774997896,0],[0,0.6557438524302001,0.6557438524302001,0,0.6164414002968976,0.9110433579144298,0,0.9110433579144299,0,0,0,0.9110433579144299,0,0.9325234581499813,0,0,0,0,0,0,0.282842712474619,0,0,0,0],[0,0.9110433579144298,0.9110433579144298,0,0,0,0,1.1090536506409416,0,0.8831760866327847,0,0,0,0,0,0.5838664230798,0,0,0,0,0.28284271247461906,0.22360679774997896,0,0,0],[0,0,0,0.5385164807134505,0,0.7348469228349535,0.58309518948453,1.0677078252031311,0,0,0.9433981132056605,0,1.0677078252031311,0,0,0,0.7348469228349535,0,0,0,0,0,0,0,0]]
message = ["fmatesd aatamwfsbdfmdxssfgosrfgt l",
"fmatesd aatamwfsqxgarjadrkaxzhfjrmskmxusyxtsdgjk",
"fmatesd aatamwatotuldxadrsdtdvbfmivamlfsdxux tjl",
"fmatesd aatamwfsfjb vjalnsgtzamdr",
"fmatesd aatamwfsqxgarjadrkawvxvp",
"fmatesd aatamwfsbjpyvlfjmwvsfxngvfaigxafamtsfsbnaftsbttkr",
"fmatesexegcxvsbsftazrffjnljg sqjrvfwrfux",
"ztjkmlvsrkakrmmsemssgffsvdfsnsmtmwfjvnf",
"rlatgsnayafmmvpmyxam xajvnjxdx"]




#turn an array of int into a string
def pretty(wordInt):
	wordChar=""
	for i in wordInt:
		wordChar += chr(i+charOffset)
	return wordChar

#turn a string into an array of int
def dirty(word):
	wordInt = []
	for i in word:
		wordInt.append(ord(i)-charOffset)
	return wordInt

#extend or crop a key depending on the word we wanna decrypt
def getResizedKey(baseKey,word):
	key = baseKey
	while len(key)< len(word):
		key.extend(key)
	key = key[:len(word)]
	return key

#decrypt the word via vigenere base on the key and the baseOffset
def vigenere(baseKey, word, nbIteration, decryptDirection, baseOffset):
	key = getResizedKey(baseKey,word)
	tempWord = word
	for iteration in range(0,nbIteration):
		out = []
		for i in range(0, len(word)):
			keyChar=key[i]
			wordChar=tempWord[i]
			outChar=0
			#find the word encrypted by the cypher
			if decryptDirection:
				outChar=(wordChar - keyChar - baseOffset + 2*26)%26
			#encrypt the word
			else:
				outChar=(wordChar + keyChar + baseOffset)%26
			out.append(outChar)
		tempWord = out
	return tempWord

def simpleVigenere(key,word):
    return pretty(vigenere(dirty(key),dirty(word),1,True,0))

print(simpleVigenere("neuf",message[0]))